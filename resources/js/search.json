[[{"i":"welcome","l":"Welcome!","p":["Welcome to the beginners' guide to using Kotlin in your FTC codebase!","This guide assumes that you know how to program in Kotlin, but no other FTC programming knowledge is necessary. This guide is meant for absolute beginners who do not have any experience with programming for FTC.","If you already know how to program for FTC in Java and can switch to Kotlin without any help, or can easily translate Java to Kotlin, I would recommend doing that because more resources are written in Java.","As this guide is meant for beginners and won't cover certain advanced topics, I would also recommend that you look at Java-specific guides afterwards. I fidn that is easier to understand Java-based FTC code now that I understand how the FTC SDK works."]},{"l":"Contributing","p":["To contribute, all you have to do is make a pull request to the Dev branch with the changes you would like to make. This is greatly appreciated as this is currently a solo, volunteer project."]},{"l":"Running locally","p":["To run this website locally, first install Retype. This can be accomplished by running the following command, assuming you already have NodeJS installed:","After navigating to the directory where you cloned the repository, run the following command to open the website in your web browser:"]}],[{"l":"Prerequisites","p":["Before you begin programming, there are a few tasks that need to be completed to ensure your hardware is ready."]},{"l":"Hardware Setup","p":["Assuming you are using a REV Control Hub, REV has graciously provided a guide on configuring it. It is recommended to read through \"Next Steps\" as we will be going into more detail about some of the things that are mentioned.","FIRST has also provided a guide for making a configuration file for your robot, as well as physically connecting hardware. Please note that FIRST's choice of hardware in this tutorial does not necessarily reflect best practices and modern preferences for certain devices, and that due diligence should be done in choosing devices."]},{"l":"Software Setup","p":["Before proceeding with this guide, please make sure you have done the following:","Have the latest version of Android Studio downloaded and installed.","Have a repository containing the latest version of the FTC SDK. I would recommend forking this on Github first and then cloning the fork locally.","Make sure the Kotlin Plugin is downloaded in Android Studio."]}],[{"l":"Installation","p":["Installing Kotlin into your FTC project is very easy and shouldn't take more than a few minutes."]},{"l":"Project Gradle Script","p":["The first step of adding Kotlin to your FTC project is by adding Kotlin to the build.gradle file that has Project: REPO-NAME next to it. Add the indicated lines of code to the aforementioned file:"]},{"l":"TeamCode Gradle Script","p":["The only other thing you have to do is copy the indicated line of code into the build.gradle file that has Module: TeamCode next to it.","If you are confused on where to copy the code, I have labeled the place to copy the first set of lines in blue, and the other line in yellow. Please ignore everything else, as this is a preexisting project that has other libraries installed. After doing this, you should be ready to start programming!"]}],[{"i":"what-is-an-opmode","l":"What is an OpMode?","p":["An OpMode is a class that you create that is runnable on your robot.","There are two types of classes that can be extended to make an OpMode: LinearOpMode and OpMode. Both will be explained in this guide, but LinearOpMode will be used for any further examples for simplicity sake.","The general rule is that code in a regular OpMode is divided up based on the conditions where it will be executed, while code in a LinearOpMode runs consecutively using methods to pause execution."]},{"l":"LinearOpMode","p":["Here are the most important methods included in the LinearOpMode class. Certain methods have been excluded because they aren't needed for amateur programmers, but you can find all of them in FIRST's documentation.","runOpMode( ) All code within this method will run once when the OpMode is initialized on your Driver Station.","waitForStart() This method will pause execution of code until you press the \"Start\" button on your driver station. This would be used if you wanted to run code in between initializing the code and the start of the period during a match.","isStarted() This method will return true if the \"Start\" button has been pressed.","isStopRequested() This method will return true if the \"Stop\" button was pressed.","opModeIsActive() will return isStarted() !isStopRequested()","opModeInInit() will return !isStarted() !isStopRequested()","Here is an example LinearOpMode that uses some of these methods:"]},{"l":"OpMode","p":["Here are all of the methods included in the OpMode class. Note that the first two are mandatory and you will get an error if you don't override both of them.","init() The code within this method will run once when the \"Init\" button is pressed","loop() The code within this method will run continuously when you press \"Start\" and until you press \"Stop\"","start() The code within this method will run once when you press the \"Start\" button. This will always run before the code in the loop() method.","init_loop The code within this method will run continously when you press the \"Init\" button. This will always run after the code in the init() method.","stop() The code within this method will run once when you press the \"Stop\" button. You should not have any code that controls the drivetrain in this method because you may be penalized in competition for moving after the match is over.","Here is an example OpMode."]},{"i":"warning-regarding-while-loops","l":"Warning regarding while() loops"},{"i":"only-use-a-while-loop-if-you-have-some-sort-of-exit-condition-otherwise-it-will-take-an-additional-5-seconds-to-stop-the-robot-when-you-press-the-stop-button-this-will-cause-you-to-incur-penalties-during-autonomous-if-it-keeps-running-after-the-30-second-period-your-code-should-be-programmed-in-a-way-to-be-responsive-to-stop-requests-one-way-of-doing-this-in-a-linearopmode-is-adding-opmodeisactive-as-a-condition-for-the-loop-as-the-loop-will-know-to-exit-after-you-press-stop","l":"Only use a while() loop if you have some sort of exit condition. Otherwise, it will take an additional 5 seconds to stop the robot when you press the \"Stop\" button. This will cause you to incur penalties during autonomous if it keeps running after the 30 second period. Your code should be programmed in a way to be responsive to stop requests. One way of doing this in a LinearOpMode is adding opModeIsActive() as a condition for the loop, as the loop will know to exit after you press stop."},{"i":"opmode-1","l":"OpMode","p":["Here are all of the methods included in the OpMode class. Note that the first two are mandatory and you will get an error if you don't override both of them.","init() The code within this method will run once when the \"Init\" button is pressed","loop() The code within this method will run continuously when you press \"Start\" and until you press \"Stop\"","start() The code within this method will run once when you press the \"Start\" button. This will always run before the code in the loop() method.","init_loop The code within this method will run continously when you press the \"Init\" button. This will always run after the code in the init() method.","stop() The code within this method will run once when you press the \"Stop\" button. You should not have any code that controls the drivetrain in this method because you may be penalized in competition for moving after the match is over.","Here is an example OpMode."]}],[{"l":"hardwareMap"},{"i":"what-is-a-hardwaremap","l":"What is a hardwareMap?","p":["A hardwareMap is a class in the FTC SDK that, using its get method, takes a class for a specific device and its name in the configuration file you made using your REV Driver Hub. It then returns an object for the device you inputted and allows for you to control it in code."]},{"i":"what-would-you-use-it-for","l":"What would you use it for?","p":["The hardwareMap class is used to initializing every component of your robot into your code so you can control each of them. For example, for a DcMotor assigned to the variable frontLeftMotor, you would turn it on full power using frontLeftMotor.power = 1.0. Note how power for motors is stored as a Double. Overall, the hardwareMap class is vital to programming and it will be used extensively throughout your entire FTC programming career."]}],[{"l":"Motors","p":["In FTC, there are 2 classes that are used to control your motors: DcMotor and DcMotorEx. These 2 classes are very similar, and if you don't plan on using the encoders attached to your motors, either of them will work.","However, if you do intend to use the encoders on your motors for features such as measuring velocity or error correction, using the DcMotorEx class is required. That being said, if you are using Mecanum wheels and want to know where your robot is on the field during autonomous, I would invest in external encoders in the form of dead wheels due to how Mecanum wheels can slip."]},{"l":"Direction","p":["As you might expect, there are two possible directions that a motor can be set to go in, with those being FORWARD and BACKWARD. You can set a motor to run in these directions by running the following:","motor.setDirection(DcMotor.Direction.FORWARD)","motor.setDirection(DcMotor.Direction.BACKWARD)","By default, the direction is set to FORWARD. exampleMotor.power = 1.0 will run the motor forwards by default, and backwards under BACKWARD mode. The opposite is true for exampleMotor.power = -1.0."]},{"l":"Run Modes","p":["TODO"]}]]